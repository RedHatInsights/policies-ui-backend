apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: policies-ui-backend
objects:
  - apiVersion: cloud.redhat.com/v1alpha1
    kind: ClowdApp
    metadata:
      name: policies-ui-backend
      labels:
        app: policies-ui-backend
    spec:
      envName: ${ENV_NAME}
      dependencies:
        - policies-engine
        - rbac
      optionalDependencies:
        - notifications-backend
      database:
        name: policies-ui-backend
        version: 13
      testing:
        iqePlugin: policies
      deployments:
        - name: service
          minReplicas: ${{MIN_REPLICAS}}
          webServices:
            public:
              enabled: true
              apiPath: policies
          podSpec:
            image: ${IMAGE}:${IMAGE_TAG}
            resources:
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
            volumes:
              - name: rds-client-ca
                emptyDir: {}
            volumeMounts:
              - name: rds-client-ca
                mountPath: /tmp
            readinessProbe:
              httpGet:
                path: /health/ready
                port: 8000
                scheme: HTTP
              initialDelaySeconds: 60
              periodSeconds: 10
              timeoutSeconds: 1
              successThreshold: 1
              failureThreshold: 3
            livenessProbe:
              httpGet:
                path: /health/live
                port: 8000
                scheme: HTTP
              initialDelaySeconds: 60
              periodSeconds: 10
              timeoutSeconds: 1
              successThreshold: 1
              failureThreshold: 3
            env:
              - name: ENV_NAME
                value: ${ENV_NAME}
              - name: QUARKUS_HTTP_PORT
                value: "8000"
              - name: QUARKUS_LOG_CLOUDWATCH_ENABLED
                value: ${CLOUDWATCH_ENABLED}
              - name: QUARKUS_LOG_CLOUDWATCH_LOG_STREAM_NAME
                value: ${HOSTNAME}
              - name: QUARKUS_LOG_SENTRY
                value: ${SENTRY_ENABLED}
              - name: QUARKUS_LOG_SENTRY_DSN
                value: "${SENTRY_DSN}"
              - name: QUARKUS_LOG_SENTRY_ENVIRONMENT
                value: ${ENV_NAME}
              - name: QUARKUS_REST_CLIENT_RBAC_READ_TIMEOUT
                value: ${RBAC_READ_TIMEOUT}
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: policies-db-cleaner-config
    data:
      clean.sh: |
        cat /policies-db-cleaner/clean.sql | psql > /dev/null
      clean.sql: |
        CALL cleanPoliciesHistory();
  - apiVersion: batch/v1
    kind: CronJob
    metadata:
      name: policies-db-cleaner-cronjob
    spec:
      schedule: ${DB_CLEANER_SCHEDULE}
      suspend: ${{DISABLE_DB_CLEANER}}
      concurrencyPolicy: Forbid
      jobTemplate:
        spec:
          template:
            spec:
              restartPolicy: Never
              volumes:
                - name: policies-db-cleaner-volume
                  configMap:
                    name: policies-db-cleaner-config
              containers:
                - name: policies-db-cleaner
                  image: quay.io/cloudservices/postgresql-rds:12
                  resources:
                    requests:
                      cpu: 100m
                      memory: 100Mi
                    limits:
                      cpu: 200m
                      memory: 200Mi
                  volumeMounts:
                    - name: policies-db-cleaner-volume
                      mountPath: /policies-db-cleaner
                  command:
                    - sh
                    - /policies-db-cleaner/clean.sh
                  env:
                    - name: PGHOST
                      valueFrom:
                        secretKeyRef:
                          name: policies-ui-backend-db
                          key: ${DB_SECRET_HOSTNAME_KEY}
                    - name: PGDATABASE
                      value: ${DB_NAME}
                    - name: PGUSER
                      valueFrom:
                        secretKeyRef:
                          name: policies-ui-backend-db
                          key: ${DB_SECRET_USERNAME_KEY}
                    - name: PGPASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: policies-ui-backend-db
                          key: ${DB_SECRET_PASSWORD_KEY}
  - apiVersion: metrics.console.redhat.com/v1alpha1
    kind: FloorPlan
    metadata:
      name: policies-backend-hms
    spec:
      database:
        secretName: ${FLOORIST_DB_SECRET_NAME}
      objectStore:
        secretName: ${FLOORIST_HMS_BUCKET_SECRET_NAME}
      logLevel: ${FLOORIST_LOGLEVEL}
      suspend: ${{FLOORIST_SUSPEND}}
      disabled: ${{FLOORIST_DISABLED}}
      queries:
        - prefix: hms_analytics/policies/status
          chunksize: 100000
          query: >-
            SELECT
              P.id AS policy_id,
              P.org_id,
              P.is_enabled,
              P.mtime AS policy_mtime,
              P.ctime AS policy_ctime,
              P.actions,
              PH.host_id,
              PH.ctime AS policy_hit_time
            FROM
              policy P
            LEFT JOIN
              policies_history AS PH
            ON
              P.id = uuid(PH.policy_id);


parameters:
  - name: CLOUDWATCH_ENABLED
    description: Enable Cloudwatch (or not)
    value: "false"
  - name: CPU_LIMIT
    description: CPU limit
    value: 200m
  - name: CPU_REQUEST
    description: CPU request
    value: 100m
  - name: DB_CLEANER_SCHEDULE
    description: Execution time specified in cron format
    value: "*/10 * * * *"
  - name: DB_NAME
    description: Database name used by the policies-db-cleaner CronJob
    value: policies_ui_backend
  - name: DB_SECRET_HOSTNAME_KEY
    description: Key of the hostname field in the policies-ui-backend-db secret
    value: db.host
  - name: DB_SECRET_PASSWORD_KEY
    description: Key of the password field in the policies-ui-backend-db secret
    value: db.password
  - name: DB_SECRET_USERNAME_KEY
    description: Key of the username field in the policies-ui-backend-db secret
    value: db.user
  - name: DISABLE_DB_CLEANER
    description: Should the DB cleaner CronJob be disabled?
    value: "false"
  - name: ENV_NAME
    description: ClowdEnvironment name (ephemeral, stage, prod)
    required: true
  - name: FLOORIST_SUSPEND
    description: Disable Floorist cronjob execution
    required: true
    value: 'true'
  - name: FLOORIST_DISABLED
    description: Determines whether to build the Floorist Job.
    value: 'false'
  - name: FLOORIST_DB_SECRET_NAME
    description: database secret name
    value: policies-ui-backend-db
  - name: FLOORIST_HMS_BUCKET_SECRET_NAME
    description: HMS bucket secret name
    value: floorist-bucket
  - name: FLOORIST_LOGLEVEL
    description: Floorist loglevel config
    value: 'INFO'
  - name: IMAGE
    description: Image URL
    value: quay.io/cloudservices/policies-ui-backend
  - name: IMAGE_TAG
    description: Image tag
    value: latest
  - name: MEMORY_LIMIT
    description: Memory limit
    value: 500Mi
  - name: MEMORY_REQUEST
    description: Memory request
    value: 250Mi
  - name: MIN_REPLICAS
    value: "1"
  - name: RBAC_READ_TIMEOUT
    description: Delay in milliseconds before an RBAC query is interrupted
    value: "2000"
  - name: SENTRY_ENABLED
    description: Enable Sentry (or not)
    value: "false"
  - name: SENTRY_DSN
    description: Sentry DSN URL
    value: ""
